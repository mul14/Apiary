FORMAT: 1A
HOST: http://localhost:8000/

# All Endpoint

This is apiary from JSON place holder for all endpoint.
There are users, posts, comments, albums, photos, and todos.


## Posts [/posts]

### Show All Posts [GET]

With method GET in this endpoint, we can see all data posts from database.

+ Response 200 (application/json)

    + Attributes (array[Posts])

### Create a New Post [POST]

With method POST in this endpoint, we make a new post and save it in database.
Of course we should to send data in body, like userId, title and body. After the data
saved in database, we get new endpoint with id like in headers response.

+ Request (application/json)

        {
            "userId" : 1,
            "title": "Add again",
            "body" : "For make new post" 
        }

+ Response 201 (application/json)

    + Headers

            Location: /posts/{id}

    + Attributes (New Post)


## Access One Data Post [/posts/{id}]

### Show One Post[GET]

We can see one post with input id in endpoint. Of course with method GET to
get the data.

+ Response 200 (application/json)

    + Attributes (Posts)

### Edit or Update Post [PUT]

Different endpoint with method GET and POST, in here we need id post in endpoint 
and choose method PUT for edit or update the data. Just send data title and body 
for changes. 

+ Request (application/json)

        {
            "title": "First Post",
            "body" : "This post have changes."
        }

+ Response 200 (application/json)

    + Attributes (Update Post)

### Delete Post [DELETE]

To delete the data, we can choose method DELETE in this endpoint.
There is a message if it success to deleted.

+ Response 200 (application/json)

        {
            "message": "Success to delete." 
        }


## All Comments in One Post [/posts/1/comments]

This endpoint used to show all Comment in one post.

### Show All Comments in One Post [GET] 

+ Response 200 (application/json)

    + Attributes (array[Comments])


## All Posts in One User [/posts?userId=1]

This endpoint used to show all post in one user.

### Show All Posts by One User [GET] 

+ Response 200 (application/json)

    + Attributes (array[Posts])


## Data Structures

### New Post

+ `userId`: 1,
+ `id`: 4,
+ `title`: `Add again`,
+ `body`: `For make new post`

### Posts

+ userId: 1,
+ id: 1,
+ title: `First Post`,
+ body: `Hello world!`

### Update Post

+ userId: 1,
+ id: 1,
+ title: `First Post`,
+ body : `This post have changes.`

### Comments

+ postId: 1,
+ id: 1,
+ name: `Lisa`,
+ email: `lisa@example.com`,
+ body: `Comment by Lisa.`